					第一周总结
	一开始想着自己有UCOSII的相关的基础知识，就先开始看FreeRTOS，发现大同小异，也是多任务管理的一个实时操作系统。
不同之处，最突出的一点当然是FreeRTOS不用钱啦，除此之外，FreeRTOS的代码量比较少，节省MCU的资源，官网上面也是有很
多不同平台不同编译器的移植好的相关的源码，结合我自己的开发板（正点原子STM32F103RCT6开发板）相关的学习资料，移植
起来也相对比较顺利。（这里FreeRTOSConfig.h用的是开发板配套的.h文件）
	FreeRTOSConfig.h文件用于配置和裁剪系统，起到进一步节省MCU资源的作用，里面很多有相关的宏，对应不同的功能的使
能和失能。
	了解了一下系统提供的有关任务的API，创建任务，删除任务，挂起任务等待，感觉都和当时学UCOS的时候差不多，创建任
务时候设置任务函数名称，任务堆栈大小，任务句柄，优先级等。还看了一些中断和优先级的配置相关的信息，感觉中断部分，
FreeRTOS和UCOS还是有一点不同的，FreeRTOS在执行中断服务函数的时候不用先屏蔽其他中断。而且FreeRTOS关闭中断可以按
照一个程序员设置的阈值来关的（这里延时函数最好不要用滴答定时器来延时），感觉这样就中断管理起来就比较有条理一些。
	FreeRTOS的优先级是数值越小，优先级就越低，刚好和UCOS相反。
	因为之前学UCOS也是只学了该操作系统的相关API的使用，还有一些信号量，邮箱等等功能的使用，希望通过FreeRTOS的学
习，两者的对比，更深入的学习理解实时操作系统。


								第二周总结
	这周继续学习了FreeRTOS，认识列表（FreeRTOS重要组成部分），还有创建任务，任务切换，
信号量，队列等等的一些功能、原理以及API的使用。
	主要是看了一下例程，使用方法和步骤。这一周看的内容，和之前学习UCOS的时候看的内容有
有很多相同的地方，信号量啊，软件定时器，事件标志组等等都是差不多的。不过在这两个星期对
FreeRTOS的学习过程中，还是弥补了不少之前对STM32和操作系统的认识的漏洞。
	更底层的操作系统原理啊，STM32的硬件架构啊等等，还需要通过进一步的学习去熟悉。
	另外，这周还学习了GIT版本库管理。
	接下来，将FreeRTOS移植到STM32F303芯片上面，并完成相应的功能要求。比如说是ADC电压的
采集，温度变化，还有led表示状态等等。利用版本库对文档以及代码的管理。如：SVN服务器的搭
建。

